name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Open Very Fast Trace ${{ github.ref_name }}
        body: |
          ## üöÄ Open Very Fast Trace ${{ github.ref_name }}
          
          ### üì¶ Installation
          
          **From crates.io:**
          ```bash
          cargo install cargo-ovft
          ```
          
          **From GitHub:**
          ```bash
          cargo install --git https://github.com/jFiedler24/open-very-fast-trace cargo-ovft
          ```
          
          **Download binaries:**
          - Linux: `cargo-ovft-${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz`
          - macOS (Intel): `cargo-ovft-${{ github.ref_name }}-x86_64-apple-darwin.tar.gz`
          - macOS (Apple Silicon): `cargo-ovft-${{ github.ref_name }}-aarch64-apple-darwin.tar.gz`
          - Windows: `cargo-ovft-${{ github.ref_name }}-x86_64-pc-windows-msvc.zip`
          
          ### ‚ú® Usage
          ```bash
          # Run requirements traceability analysis
          cargo ovft
          
          # Generate detailed report
          cargo ovft --verbose --output trace_report.html
          
          # Check mode for CI/CD
          cargo ovft --check
          ```
          
          ### üôè Thanks to OpenFastTrace
          This project is inspired by and compatible with [OpenFastTrace](https://github.com/itsallcode/openfasttrace).
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload Release Assets
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} -p cargo-ovft

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        strip cargo-ovft || true  # Strip symbols if possible
        tar -czf ../../../cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.tar.gz cargo-ovft
        cd ../../..

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.zip cargo-ovft.exe
        cd ../../..

    - name: Upload release assets (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
        asset_name: cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload release assets (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.zip
        asset_name: cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.zip
        asset_content_type: application/zip

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish ovft-core to crates.io
      run: cargo publish -p ovft-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # In case version already exists

    - name: Wait for crates.io propagation
      run: sleep 60

    - name: Update cargo-ovft to use published ovft-core version
      run: |
        # Extract version from ovft-core/Cargo.toml
        VERSION=$(grep '^version =' ovft-core/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Using ovft-core version: $VERSION"
        # Update cargo-ovft dependency
        sed -i "s|ovft-core = { path = \"../ovft-core\" }|ovft-core = \"$VERSION\"|" cargo-ovft/Cargo.toml
        cat cargo-ovft/Cargo.toml

    - name: Publish cargo-ovft to crates.io
      run: cargo publish -p cargo-ovft --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
