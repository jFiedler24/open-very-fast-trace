name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: false
          - rust: nightly
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.rust }}

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Build workspace
      run: cargo build --workspace --verbose

    - name: Run tests
      run: cargo test --workspace --verbose

    - name: Test cargo plugin
      run: |
        # Build and install the plugin locally
        cargo install --path cargo-ovft --debug
        # Test it works
        cargo ovft --help
        # Test it can generate reports
        cargo ovft --output test_report.html --verbose

  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} -p cargo-ovft

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.tar.gz cargo-ovft
        cd ../../..

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.zip cargo-ovft.exe
        cd ../../..

    - name: Upload release assets (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
        asset_name: cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload release assets (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.zip
        asset_name: cargo-ovft-${{ github.ref_name }}-${{ matrix.target }}.zip
        asset_content_type: application/zip

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish ovft-core to crates.io
      run: cargo publish -p ovft-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # In case it's already published

    - name: Wait for ovft-core to be available
      run: sleep 30

    - name: Update cargo-ovft to use published ovft-core
      run: |
        sed -i 's/ovft-core = { path = "..\/ovft-core" }/ovft-core = "0.1.0"/' cargo-ovft/Cargo.toml

    - name: Publish cargo-ovft to crates.io
      run: cargo publish -p cargo-ovft --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false
